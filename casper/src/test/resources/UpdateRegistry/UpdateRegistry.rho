new
  deployId(`rho:rchain:deployId`),
  updateContract,
  rl(`rho:registry:lookup`),
  rlret,
  stdout(`rho:io:stdout`),
  updateRet,
  deployerID(`rho:rchain:deployerId`),
  systemContractManager2,           // MultiSig contract's method entry point
  blessedContractLocMapCh
in {
  for (@blessedContractLocMap, ret <- updateContract){
    blessedContractLocMapCh!(blessedContractLocMap)|
    let @pubKey <- 
      // fc743bd08a822d544bfbe05a5663fc325039a44c8f0c7fbea95a85517da5c36b private
      "04e2eb6b06058d10b30856043c29076e2d2d7c374d2beedded6ecb8d1df585dfa583bd7949085ac6b0761497b0cfd056eb3d0db97efb3940b14c00fff4e53c85bf".hexToBytes(),
    in {
      contract systemContractManager2(@"update", @deployerID, @uri, @con, @meth, ret) = {
        // there is an update proposal for `uri`
        new DeployerIdOps(`rho:rchain:deployerId:ops`), deployerPubKeyBytesCh in {
          DeployerIdOps!("pubKeyBytes", deployerID, *deployerPubKeyBytesCh) |
          for (@deployerPubKeyBytes <- deployerPubKeyBytesCh){
            if (deployerPubKeyBytes == pubKey){
              for (@blessedContractLocMap <<- blessedContractLocMapCh) {
                let @loc <- blessedContractLocMap.get(uri) in {
                  for (oldData <- @loc) {
                    new tmp, newRet in {
                      @(*oldData, "extractState")!(*tmp) |
                      for (@oldState <- tmp) {
                        // launch new contract instance with initial state extracted from the old instance
                        @con!(oldState, *newRet) |
                        // write new method entry point to location channel
                        @loc!(meth) |
                        ret!((true, *newRet))
                      }
                    }
                  }
                } 
              }
            } else {
              ret!((false, "You have no permission to do that."))
            }
          }
        }
      } |
      contract systemContractManager2(@"sayHello", returnCh) = {
        returnCh!("hello")
      } |
      contract @(bundle+{*systemContractManager2}, "extractState")(ret) = {
        for (@blessedContractLocMap <<- blessedContractLocMapCh) {
          ret!(blessedContractLocMap)
        }
      } 
    }
  } |
  stdout!(("update blessed registry start!!!!!"))|
  rl!(`rho:registry:systemContractManager`, *rlret)|
  for(@oriSystemContractManager <- rlret){
    stdout!(("update get multisig ok", oriSystemContractManager))|
    @oriSystemContractManager!("update",
                  *deployerID,
                  `rho:registry:systemContractManager`,
                  *updateContract,
                  *systemContractManager2,
                  *updateRet)|
    for (@result <- updateRet){
      stdout!((result, "update result")) |
      deployId!(result)
    }
  }
}