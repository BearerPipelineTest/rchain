new
  deployId(`rho:rchain:deployId`),
  updateContract,
  AuthKey,
  AuthStateCh,
  rl(`rho:registry:lookup`),
  rlret,
  _authKey,
  stdout(`rho:io:stdout`),
  updateRet,
  deployerID(`rho:rchain:deployerId`)
in {
  for (oldAuthKeyState, oldAuthKey, ret <- updateContract){
    AuthStateCh!(0)|
    contract AuthKey(@"make", @shape, ret) = {
      new authKey in {
        contract authKey(@"challenge", retCh) = {
          retCh!(bundle0{ (*_authKey, shape)})
        } |
        ret ! (bundle+{*authKey})
      }
    } |
    contract AuthKey(@"check", key, @shape, ret) = {
      new responseCh in {
        key!("challenge", *responseCh) |
        for (@response <- responseCh) {
          ret!(response == { bundle0{ (*_authKey, shape) } } )
        }
      }
    } |
    contract AuthKey(@"add", @number, ret) = {
      for (@ori <- AuthStateCh){
        ret!(number + ori)|
        AuthStateCh!(number + ori)
      }
    } |
    for (ret <- @(*AuthKey, "extractState")){
      for (@number <<- AuthStateCh){
        ret!(number)
      }
    } | 
    ret!(*AuthKey)
  } |
  stdout!(("propose start!!!!!"))|
  rl!(`rho:registry:systemContractManager`, *rlret)|
  for(@(_, systemContractManager) <- rlret){
    stdout!(("propose get multisig ok", systemContractManager))|
    @systemContractManager!("update",
                  *deployerID,
                  `rho:rchain:authKey`,
                  *updateContract,
                  *updateRet)|
    for (@result <- updateRet){
      stdout!((result, "update result")) |
      deployId!(result)
    }
  }
}
